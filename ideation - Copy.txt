Battleship (game)
failure modes:
- mistyping will work and then next turn crash on enemy turn
TODO:
- add a cancel option during custum choosing
- ending menu
- add sounds whenclicking ()menu, fire, miss, countdown
- stop bringing back to thesame method recusively it creates weird issues
- combine MakeShipAssets and MakeSeaMappings into MakeSeaAssets (will reduce the swithc statements)
- change rule about not being able to place on edges of the map
- if a whole ship is sunk it has to be announced.
- make splash screen when a hit or miss happens.
- make the do while loop in the game loop more efficient (take a list and shuffle the values)
- find a way to handle startgame > back > startGame from going into the game loop twice (doesnt seem to place ships twice though)
         Good thing is that the first loop contains the full sea so you can still use it.
- make the actual game loop
- make a UI class to handle all print statements
- add the right keywords for you classes and methods public, private static etc
- improve the console write statements!
- order the methods in different classes
- do a proper settings menu
    - which game version 1990 Milton Bradley version or 2002 Hasbro version
    - Tune Game Board (sea) dimensions (10-26)
    - Specify the max turn before game end (sum across boats - SEA_SIZE*SEA_SIZE)
    - controlls section e for exit game or c for exiting choosing
    - (optional) add/edit more boat models
    - (optional) add/edit more sea options (eg partially destroyed)
    - cheat mode (sea enemy ships)
- Clean up comments in code, add summaries to methods
- Make ships nicer with directions see below for more examples ([-][-][>])

START:
10x10 grid: [~] (waves/unknown:blue) [x] (enemy hit:red) _ (miss) [O] (boat:green)

2 arrays start in [~] (right is enemy field and left is own field)
2 arrays pass between methods:
	create grid
	make move

5 types of ships: 
Carrier		[^][^][-][-][-][>]
Battleship	[|][^][O][O]
Destroyer	[|][^][O]
Submarine	[|][^][O]
Partrol Boat	[>][>]
On screen: just with [O]
In variable: 5 variables, int with num for lives

BOAT PLACEMENT:
which boat: choose your boat to place
where:	give a valid starting location and end location (D3-D5 or F5-B5) possible direction with (C2<-C4)
	check if given letter+number doesnt exceed index 9
	check for correct boat length
	check for overlap with other boats 2
	store the full coordinates
show result
change colour of changed boat
which boat: choose your boat to place
	if boat already chosen
		do you wich to redo? 	yes: set that boat ID to zero
					no: choose boat to place
	else:
		loop back
if all chosen:
	do you wish to start? Y/n


GAMEPLAY:
user input: letter+number convert to row+column
result on enemy: [x] or _ (hit or miss)
bot: random row + col (sampling without replacement)
result on own: [x] or _ (hit or miss)
		
		static (int[,], bool) CheckShipPlacement(int[,] sea, Tuple<int, int> position, char direction, int shipLength)
        {
            if (!(direction == '^' || direction == 'v' || direction == '<' || direction == '>'))
            {
                throw new ArgumentException($"Invalid parameter as direction: {direction}. Please choose from:<>^v");
            }

            (int row, int col) = position;
            Console.WriteLine($"random position {row} {col}");
            // Will be almost the same for the different directions.
            if (direction == '^')
            {
                int[,] shipMask = new int[shipLength+2, 3]; // this changes depending on the direction
                for (int i = 1; i < shipMask.GetLength(0)-1; i++)
                {
                    for (int j = 1; j < shipMask.GetLength(1)-1; j++)
                    {
                        shipMask[i,j] = 3; // seaMappings code for an intact boat
                    }
                }
                // Iterate using the mask
                for (int i = 0; i < sea.GetLength(0)-shipMask.GetLength(0)+1; i++)
                {
                    for (int j = 0; j < sea.GetLength(1)-shipMask.GetLength(1)+1; j++)
                    {
                        // detect if the ship location is within this mask
                        if (i+shipLength==row && j+1==col) // this changes depending on the direction
                        {
                            // go over the mask inside the seaCopy
                            for (int im = 0; im < shipMask.GetLength(0); im++)
                            {
                                for (int jm = 0; jm < shipMask.GetLength(1); jm++)
                                {
                                    // Place the ship on the coordinates where there is nothing AND the mask has a ship
                                    Console.WriteLine($"{i},{j},{im}, {jm}, max len {sea.GetLength(0)}");
                                    if (sea[i+im, j+jm] == 0 && shipMask[im, jm] == 3)
                                    {
                                        sea[i+im, j+jm] = 3;
                                    }
                                    // Stop if you want to place a ship where the sea already has one
                                    else if (sea[i+im, j+jm] != 0 && shipMask[im, jm] == 3)
                                    {
                                        return (sea, false);
                                    }
                                    // else if (true)
                                    // {
                                    //     return (sea, false);
                                    // }
                                }
                            }
                            return (sea, true);
                        }
                    }
                }
            }
            else if (direction == 'v')
            {
      
            }                        
            else if (direction == '<')
            {
    
            }
            else if (direction == '>')
            {
    
            }
            return (sea, false);
        }



						// if      (direction == '^')
                        // {
                        //     int[,] shipMask = new int[ship.Value+2, 3]; // this changes depending on the direction
                        //     for (int i = 1; i < shipMask.GetLength(0)-1; i++)
                        //     {
                        //         for (int j = 1; j < shipMask.GetLength(1)-1; j++)
                        //         {
                        //             shipMask[i,j] = 3; // seaMappings code for an intact boat
                        //         }
                        //     }
                        //     // Iterate using the mask
                        //     for (int i = 0; i < seaUpdate.GetLength(0)-shipMask.GetLength(0)-1; i++)
                        //     {
                        //         for (int j = 0; j < seaUpdate.GetLength(1)-shipMask.GetLength(1)-1; j++)
                        //         {
                        //             // detect if the ship location is within this mask
                        //             if (i+ship.Value==row && j+1==col) // this changes depending on the direction
                        //             {
                        //                 // go over the mask inside the seaUpdate
                        //                 for (int im = 0; im < shipMask.GetLength(0); im++)
                        //                 {
                        //                     for (int jm = 0; jm < shipMask.GetLength(0); jm++)
                        //                     {
                        //                         // Place the ship on the coordinates where there is nothing AND the mask has a ship
                        //                         if (seaUpdate[i+im, j+jm] == 0 && shipMask[im, jm] == 3)
                        //                         {
                        //                             seaUpdate[i+im, j+jm] = 3;
                        //                         }
                        //                     }
                        //                 }
                        //             }
                        //         }
                        //     }
                            
                            ////////////////////////////////////////////////////////////////////////
                            // Option 2: Iterate using ship positions depending on their size and orientation
                            // for (int i = ship.Value; i < sea.GetLength(0); i++)
                            // {
                            //     for (int j = 1; j < sea.GetLength(1); j++)
                            //     {
                            //         if (i==row && j==col)
                            //         {
                                        
                            //         }
                            //     }
                            // }
                        // }
                        // else if (direction == 'v'){int[,] window = new int[ship.Value+2, 3];}
                        
                        // else if (direction == '<'){int[,] window = new int[3, ship.Value+2];}

                        // else if (direction == '>'){int[,] window = new int[3, ship.Value+2];}

                        // for (int i = 0; i < sea.GetLength(0); i++)
                        // {
                        //     for (int j = 0; j < sea.GetLength(1); j++)
                        //     {
                        //         if      (direction == '^')
                        //         {
                        //             if (i+ship.Value==row && j+1==col)
                        //             {
                        //                 // set the sea values so they have a boat there unless that value is already a boat
                        //             }
                        //         }
                        //         else if (direction == 'v')
                        //         {
                        //             if (i+1==row && j+1==col)
                        //             {
                                        
                        //             }
                        //         }                        
                        //         else if (direction == '<')
                        //         {
                        //             if (i+1==row && j+ship.Value==col)
                        //             {
                                        
                        //             }
                        //         }
                        //         else if (direction == '>')
                        //         {
                        //             // check if you can merge this with 'v'
                        //             if (i+1==row && j+1==col)
                        //             {
                                        
                        //             }
                        //         }
                        //     }
                        // }

